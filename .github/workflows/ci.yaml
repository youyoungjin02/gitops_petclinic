# 워크플로우의 이름을 정의합니다.
name: Build, Push, and Update Deployment

# 워크플로우를 트리거하는 이벤트를 정의합니다.
# 이 워크플로우는 main 브랜치에 대한 푸시 이벤트 또는 main 브랜치로의 풀 리퀘스트 이벤트가 발생할 때마다 트리거
on:
  push:
    branches:
      - main  # main 브랜치에 푸시가 발생하면 트리거
  pull_request:
    branches:
      - main  # main 브랜치로의 풀 리퀘스트가 발생하면 실행

# 빌드 작업 정의  
jobs:
  build:
    runs-on: ubuntu-latest  #  build 작업이 정의되며 작업은 최신 버전의 Ubuntu 환경에서 실행됨
    steps:
    
    # 코드 체크아웃
    # GitHub 저장소의 소스를 runner VM에 가져옵니다. 
    - name: Checkout repository
      uses: actions/checkout@v3

    # PetClinic은 Java 기반이므로 JDK 환경이 필요. 여기서는 temurin 배포판의 Java 25을 설치
    - name: Set up JDK 25
      uses: actions/setup-java@v3
      with:
        java-version: '25'
        distribution: 'temurin'

    # Maven Wrapper 실행 권한 부여. 
    # ~/.m2/repository 경로의 Maven 의존성을 캐시. pom.xml이 변하지 않으면 기존 캐시를 재사용 → 빌드 속도 향상.
    - name: Grant execute permission for Maven Wrapper
      run: chmod +x ./mvnw

    # Maven 캐싱
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    # 애플리케이션 빌드. Spring Boot PetClinic을 빌드하여 JAR 파일 생성.
    - name: Build with Maven Wrapper
      run: ./mvnw package -DskipTests

    # AWS 자격 증명을 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    
    # Amazon ECR에 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    # Docker 이미지 빌드 & 푸시
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: 783152937517.dkr.ecr.ap-south-1.amazonaws.com # 수정 []포함 내용 삭제후 생성된  registry 입력
        ECR_REPOSITORY: user15-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Deployment YAML 업데이트
    - name: Update Deployment YAML
      run: |
        sed -i 's|image: .*|image: 783152937517.dkr.ecr.ap-south-1.amazonaws.com/user15-repo:${{ github.sha }}|' k8s/deployment.yaml

    # 변경사항 커밋 & 푸시
    - name: Commit and push if there are changes
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'github-actions@github.com'
        git add k8s/deployment.yaml
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update image tag to ${{ github.sha }}"; git push https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }})
        
